<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blockchain on </title>
    <link>https://www.pingrunhuang.github.io/categories/blockchain/</link>
    <description>Recent content in blockchain on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Feb 2020 16:10:54 +0800</lastBuildDate>
    <atom:link href="https://www.pingrunhuang.github.io/categories/blockchain/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My first step into the crypto world</title>
      <link>https://www.pingrunhuang.github.io/blog/2020-02-20/</link>
      <pubDate>Thu, 20 Feb 2020 16:10:54 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2020-02-20/</guid>
      <description>In 2019, I started a position as a quant developer in crypto.com. So half of the year later, in 2020, I decided to actually stacking my own money into trading crypto. See how the return rate will be at the end of this year.
Memorial moment of my first BTC purchase How it goes? I&amp;rsquo;m living in China which means the alternative exchange to purchase btc is pretty limit. Most exchange like Binance or even my own company crypto.</description>
    </item>
    <item>
      <title>Merkle tree</title>
      <link>https://www.pingrunhuang.github.io/blog/2017-12-25/</link>
      <pubDate>Mon, 25 Dec 2017 09:26:46 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2017-12-25/</guid>
      <description>之前讲过一篇我对于区块链的理解的文章，文章中讲述的主要数据结构是叫linkedlist的数据结构，但是这么大型的系统，每一个block都使用链表，block与block之间也使用链表进行链接，这无异于将赤壁之战中捆绑所有曹军的战船嘛，显然是不现实的。于是我开始找寻答案，发现原来底层是使用了一个叫merkle tree的数据结构，这玩意在当时读书时候是不曾接触过的，刚好可以学习一下，顺便也记录一下。
从wikipedia的解释，merkle tree实际上是一个hash tree（可以看出区块链也实际上也只是在重复使用哈希的概念而已）。它要解决的问题实际上只有一个，怎么样保证快速的verify某个交易是否已经在链上了，如果是用链表的思路的话，就要遍历链表的每一个节点，按照现在bitcoin主链上的block数量_514166_个，每个block里面拥有的transaction数量是不定的，也就是每一笔交易最坏的情况都要遍历_514166_*_n_次才能找到结果，那这个效率是奇低的。于是，md5这家伙就又进来搞事情了。
借用vitalik大神的一幅图
从图中可以看出，merkle tree实际上就是一个二叉树（以太坊是用非二叉树的形式实现的merkle tree），每一个merkle tree代表一个block，这样一个轻型的客户端需要记录的数据只是一些对应的md5值就可以实现对给定transaction进行校验，从而判断这个交易是否已经在链上，从而防止二次上链。举个栗子：
给定一个交易tx3, 给定hash2和一个merkle md5(md5(tx3)+hash2)的值跟merke root进行比对就可以了，如果相等说明transaction在该里面，否则不在。这个算法实际上也是在用空间换时间的。 在vitalik大神的博客里面，他还详细阐述了binary merkle tree的不足之处，同时也介绍了以太坊为什么需要另外三种树结构，感兴趣的同学可以看看
Reference https://blog.ethereum.org/2015/11/15/merkling-in-ethereum/ https://en.wikipedia.org/wiki/Merkle_tree https://medium.com/@evankozliner/merkle-tree-introduction-4c44250e2da7 https://medium.com/coinmonks/merkle-trees-the-backbone-of-distributed-software-4fa0805132c6 </description>
    </item>
    <item>
      <title>My understanding on blockchain so far</title>
      <link>https://www.pingrunhuang.github.io/blog/2017-12-23/</link>
      <pubDate>Sat, 23 Dec 2017 11:43:39 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2017-12-23/</guid>
      <description>Block chain has been talked a lot in the field of high tech industry. Being able to understand this decentralized technology is a plus for my career and able to implement it practicely will even better. I will talk about some information I have learnt so far in this post including the implementation of blockchain using javascript.
继上次写的一篇博文What is bitcoin mining?之后，这次继续写下关于bitcoin技术的笔记。
相信看这篇文章的读者们应该或多或少对blockchain和bitcoin有所了解了，如果这里面涉及到的一些术语觉得不理解，可以试图从reference那里找到答案，实在不行可以wiki之或者直接评论告诉我哦。那我主要在这里梳理一下blockchain到底解决什么问题和其中我认为很有趣的技术细节。
bitcoin要解决的问题是去交易的中介，类似于银行在传统的交易模型中的地位，这是一个很直观而且亟待解决的问题。这样做似乎很理想，但是有两个很明显的问题需要解决：
怎么确保每一笔先后发生的交易的先后顺序？ 怎么确保在A到B的交易中，A有足够的金额发给B呢？ 为了解决第一个问题，blockchain被提出来了。说白了就是一个double linked list，每个新加入的block被作为一个新的节点被加入现存在的blockchain里面。根据satoshi nakamoto提出的论文，每一笔交易在加入整个chain的时候需要经历6个步骤：</description>
    </item>
  </channel>
</rss>

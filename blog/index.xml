<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on </title>
    <link>https://www.pingrunhuang.github.io/blog/</link>
    <description>Recent content in Blogs on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 May 2024 11:09:40 +0800</lastBuildDate>
    <atom:link href="https://www.pingrunhuang.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Differences among tuple, list and set in python?</title>
      <link>https://www.pingrunhuang.github.io/blog/2024-05-13/</link>
      <pubDate>Mon, 13 May 2024 11:09:40 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2024-05-13/</guid>
      <description>Basic comparison list: ordered, mutable, duplicable set: set([1, 2, 3, 4]), not duplicable, not ordered # set&amp;#39;s operation a = set([1, 2, 3]) b = set([2, 3, 4]) a.intersection(b) # equivalent to c = a &amp;amp; b, return set([2,3]) c.issubset(a) # return true, equivalent to c &amp;lt;= a c.issuperset(a) # return false, equivalent to c &amp;gt;= a a.difference(b) # return set([1]), equivalent to a-b a.symmetric_difference(b) # return set([1,4]), equivalent to a ^ b tuple: immutable, ordered, duplicable When to use what?</description>
    </item>
    <item>
      <title>An experience of enhancing python efficiency</title>
      <link>https://www.pingrunhuang.github.io/blog/2020-04-22/</link>
      <pubDate>Wed, 22 Apr 2020 23:57:48 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2020-04-22/</guid>
      <description>Recently I ran into a tricky question which seems to a fairly easy one at the first glance. It is a typical data processing related issue including duplication check, sorting .etc In this blog, I&amp;rsquo;m going to demonstrate the issue and mark down the process of how to spot the bottleneck to level up the program. Again, any optimization apart from the real issue backed is nonsense. Therefore this is just a brief or general optimization idea for similer related issues.</description>
    </item>
    <item>
      <title>My first step into the crypto world</title>
      <link>https://www.pingrunhuang.github.io/blog/2020-02-20/</link>
      <pubDate>Thu, 20 Feb 2020 16:10:54 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2020-02-20/</guid>
      <description>In 2019, I started a position as a quant developer in crypto.com. So half of the year later, in 2020, I decided to actually stacking my own money into trading crypto. See how the return rate will be at the end of this year.
Memorial moment of my first BTC purchase How it goes? I&amp;rsquo;m living in China which means the alternative exchange to purchase btc is pretty limit. Most exchange like Binance or even my own company crypto.</description>
    </item>
    <item>
      <title>Data storage inspired by video production</title>
      <link>https://www.pingrunhuang.github.io/blog/2019-06-30/</link>
      <pubDate>Sun, 30 Jun 2019 15:19:27 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2019-06-30/</guid>
      <description>There are plenty of concepts related to computer science in video production actually which are so confusing for one want to get into the field of shooting higher quality of video. So in this blog. I will introduce some researches that I have done on these concepts from the perspective of a software engineer. Hopefully I can explain them clearly and get the chance to talk about how I get inspired to apply storing data in database by the way data get stored in video.</description>
    </item>
    <item>
      <title>How to improve your neural net week 2: note of deeplearning.ai from coursera</title>
      <link>https://www.pingrunhuang.github.io/blog/2019-04-21/</link>
      <pubDate>Sun, 21 Apr 2019 12:46:43 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2019-04-21/</guid>
      <description>This week&amp;rsquo;s topic is about speeding up the learning process.
Mini batch epoch: a single run through the whole training examples. If we are using mini batch technique with T batches, we will run T times of gradient descent wheras without mini batch, we will get only 1 time of gradient descent.
Notation $$ a^{[l]\{t\}(m)} $$ means the the activation value of m examples in t minibatch in lth layer.</description>
    </item>
    <item>
      <title>SQL self join use case</title>
      <link>https://www.pingrunhuang.github.io/blog/2019-01-10/</link>
      <pubDate>Thu, 10 Jan 2019 11:47:55 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2019-01-10/</guid>
      <description>How to query on timeseries data based on time window? Suppose I have the following time series data: I want to calculate mean, std value inside a time window with the value of 2 for different name. I used to use spark to first group by name and then do the calculation in the list within the different group. This is actually quite fast. But I later on figured out that we can first self join based on the time window condition like below:</description>
    </item>
    <item>
      <title>Introduction to aws EMR</title>
      <link>https://www.pingrunhuang.github.io/blog/2018-08-21/</link>
      <pubDate>Tue, 21 Aug 2018 00:13:03 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2018-08-21/</guid>
      <description>Recently I have to deal with data pipeline with large volumn of data. I was using python script first to make plenty of sessions query for each row of data because of cascading query between different tables. This caused bottleneck for only 400,000 rows of data which required almost 2 hrs of processing time. I have used different approches like batch querying the dimension table or even async programming to separate the compute and insert operation.</description>
    </item>
    <item>
      <title>My understanding on asynchronous programming in python</title>
      <link>https://www.pingrunhuang.github.io/blog/2018-08-09/</link>
      <pubDate>Thu, 09 Aug 2018 23:47:22 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2018-08-09/</guid>
      <description>Why do we need asynchronous? Chess master Judit Polg√°r hosts a chess exhibition in which she plays multiple amateur players. She has two ways of conducting the exhibition: synchronously and asynchronously. Assumptions:
24 opponents Judit makes each chess move in 5 seconds Opponents each take 55 seconds to make a move Games average 30 pair-moves (60 moves total)
Synchronous version: Judit plays one game at a time, never two at the same time, until the game is complete.</description>
    </item>
    <item>
      <title>How does branches work in git</title>
      <link>https://www.pingrunhuang.github.io/blog/2018-06-27/</link>
      <pubDate>Wed, 27 Jun 2018 22:56:50 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2018-06-27/</guid>
      <description>Branches in git is divided into 2 kind. Remote and local. I will demonstrate a basic scenario in this post regarding the local branch.
local branch Scenario
You are working on your own branch while there is an issue shown up on production branch which need you to do a hotfix. Here is what you need to do.
switch to production branch create a issue branch and switch to it which allow you to start working on it and do some commits.</description>
    </item>
    <item>
      <title>Git push vs git push</title>
      <link>https://www.pingrunhuang.github.io/blog/2018-06-19/</link>
      <pubDate>Tue, 19 Jun 2018 22:59:51 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2018-06-19/</guid>
      <description>Recently I&amp;rsquo;ve been using gerrit as a version control tool. I was taking it for granted that gerrit is some sort of github. But unfortunately, it is not. Gerrit has its own logical way of managing the version. One example is git push.
In github, I use git push origin &amp;lt;branch_name&amp;gt; for push changes to the remote repo where the branch_name is just simply the same name as remote like master or dev.</description>
    </item>
    <item>
      <title>A note on different port of Hadoop eco-system</title>
      <link>https://www.pingrunhuang.github.io/blog/2018-06-11/</link>
      <pubDate>Mon, 11 Jun 2018 11:07:49 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2018-06-11/</guid>
      <description>hdfs internet:
namenode web monitor port dfs.http.address: 50070 datanode web monitor port dfs.datanode.http.address: 50075 dfs.secondary.http.address: 50090 dfs.backup.http.address: 50105 mapred.job.tracker.http.address: 50030 mapred.task.tracker.http.address: 50060 localnet:
dfs.datanode.address: 50010 for data transmition journal node: 8485 hbase port: 60010 hive port: kylin port: 7070 zookeeper ps: QuorumPeerMain 2181: zookeeper client connection 3888: connecting other server 61862: spark localnet
port: 6066 spark master port: 7077 internet
4040: for each job monitor 18080: for history server 8080: for the whole monitor yarn localnet:</description>
    </item>
    <item>
      <title>3 ws of Bloomfilter</title>
      <link>https://www.pingrunhuang.github.io/blog/2018-05-04/</link>
      <pubDate>Fri, 04 May 2018 12:03:46 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2018-05-04/</guid>
      <description>Hey guys, today I wanna talk about a new data structure used in hbase for fast random scan. I categorized this topics into the hbase subdirectory because it caught my attention when I try to split regions in hbase manually. In this blog, I will be explaining what is bloomfilter, why it is useful for hbase for fast random access and most importantly, when to use it for our own application.</description>
    </item>
    <item>
      <title>Call by value or reference?</title>
      <link>https://www.pingrunhuang.github.io/blog/2018-03-15/</link>
      <pubDate>Thu, 15 Mar 2018 23:08:53 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2018-03-15/</guid>
      <description>When solving leetcode with python, I found some interesting things happening in python which confuse me whether python is passing value like Java or reference like c++. So I dive in to google for some answer in case someone have written something on this part. Indeed, Jeff Knupp wrote this blog which notify me that python does neither. It treats variable or arguments as a name which combine to an object.</description>
    </item>
    <item>
      <title>From hamming distance to leetcode thought--leetcode 477</title>
      <link>https://www.pingrunhuang.github.io/blog/2018-03-09/</link>
      <pubDate>Fri, 09 Mar 2018 12:17:25 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2018-03-09/</guid>
      <description>‰ªäÂ§©ÂÜôÂà∞‰∫ÜleetcodeÁ¨¨477ÈÅìÈ¢òÁõÆÁöÑÊó∂ÂÄôË°®Á§∫ÂçÅÂàÜÊøÄÂä®Ôºå‰∏ÄÊñπÈù¢ËßâÂæóÂà∑leetcodeÂæà‰πÖÊ≤°ÊúâÂà∑Âà∞Ëøô‰πàÊúâË∂£ÁöÑÈ¢òÁõÆ‰∫ÜÔºåÁ¨¨‰∫åÊñπÈù¢‰πüÊòØÊÉ≥ËÆ∞ÂΩï‰∏Ä‰∏ãÂà∑leetcodeÁöÑËøáÁ®ã‰∏≠ÁöÑ‰Ωì‰ºö„ÄÇ
Âà∑leetcode‰ªé‰∏ÄÂºÄÂßãËßâÂæóÂæàÊûØÁá•‰πèÂë≥,Âà∞Áé∞Âú®Âá†‰πéÊØèÂ§©Âà∑‰∏ÄÈÅìleetcodeÔºå‰ºº‰πéÊàê‰∏∫‰∫ÜÈ•≠ÂêéÊï£Ê≠•‰∏ÄÊ†∑‰π†‰ª•‰∏∫Â∏∏ÁöÑ‰∫ãÊÉÖ‰∫Ü„ÄÇËøôÂÖ∂‰∏≠‰∏ªË¶ÅÊúâ‰∫ÆÁÇπÊòØÊàëËßâÂæóÂà∑leetcodeÂ∏¶ÁªôÊàëÁöÑÂ•ΩÂ§Ñ„ÄÇ
Âà∑leetcodeÁöÑËøáÁ®ã‰∏≠ÈÄºÁùÄÊàëÂéªÁúã‰∏Ä‰∫õÁªïÂè£ÁöÑËã±ÊñáÂè•Â≠ê„ÄÇ Âú®‰∏çÁü•‰∏çËßâ‰∏≠ËÆ≠ÁªÉ‰∫ÜÊàëËæπÁúãËã±ÊñáËæπÊÄùËÄÉÁöÑËÉΩÂäõ„ÄÇ Ë∂äÊù•Ë∂äÊéåÊè°‰∏ÄÈó®ËØ≠Ë®ÄÂÖ∂ÂÆûÂè™Ë¶ÅÂà∑‰∏ÄÈÅçleetcodeÂ∞±ËÉΩÊáÇ‰∏™ÂÖ´‰πùÂçÅ‰∫Ü„ÄÇ ÂØπ‰∫éÁ¨¨‰∏ÄÁÇπÂΩìÁÑ∂ÊòØ‰∏çË®ÄËá™ÊòéÁöÑ‰∫ÜÔºåÂØπ‰∫éÁ¨¨‰∫åÁÇπÔºåÊàëÂàöÂºÄÂßãÁöÑÊó∂ÂÄôÊ≤°ÊúâËøôÁßçÊÑüËßâÔºå‰∏çËøáÂêéÊúüÂà∑‰∫Ü‰∏ÄÈ°µleetcode‰πãÂêéÔºå‰Ωì‰ºöÈ¢áÊ∑±„ÄÇÊàëÁî®ÁöÑÊòØpythonÔºåÊâÄ‰ª•ÊØèÊ¨°ÂÅöÂÆåÈ¢òÊàëÈÉΩ‰ºöÂéªdiscussionÈáåÈù¢ÊâæÂ§ßÁ•û‰ª¨ÁöÑÁ•ûÊìç‰ΩúÔºåÊÖ¢ÊÖ¢ÁöÑÁ´üÁÑ∂Áà±‰∏ä‰∫ÜpythonÂì≤Â≠¶‰∏ÄËà¨ÁÆÄÊ¥ÅÁöÑÁºñÁ®ãÊÄùÊÉ≥ÔºåÂæàÂ§öÊäÄÂ∑ßÁúüÁöÑÊòØÂè™Ë¶Å‰∏ÄË°åÂ∞±ËÉΩÂÆûÁé∞javaÂçÅÂá†Ë°åÁöÑÊìç‰Ωú„ÄÇËøôÁÇπËÆ©ÊàëÊØèÊ¨°ÂØπÊØîÂÆåÂ§ßÁ•ûÁöÑÊìç‰ΩúÂíåÊàëËá™Â∑±ÁöÑÁ¨®Êìç‰Ωú‰πãÂêéÔºåÊÄªÊúâ‰∏ÄÁßçwhat shit am I writingÁöÑÊÑüËßâÔºåÁÑ∂ÂêéÂ∞±ÊòØËØïÁùÄÊ®°‰ªøÂ§ßÁ•û‰ª¨ÁöÑÊìç‰ΩúÔºåÈáçÁé∞‰∏ÄÊ¨°implementation„ÄÇÊàëÁõ∏‰ø°‰∏çÂè™ÊòØpythonÔºåjava„ÄÅscalaÊàñËÄÖgolangÈÉΩÂèØ‰ª•Âú®ÈáåÈù¢ÊâæÂà∞ÂØπÂ∫îÁöÑËß£ÈáäÔºåÊàëËÆ§‰∏∫ËøôÊòØÊàëÁõÆÂâçÂèëÁé∞ÁöÑÂ≠¶‰π†ËØ≠Ë®ÄÁöÑÊç∑ÂæÑ„ÄÇ
Â•Ω‰∫ÜÔºåË®ÄÂΩíÊ≠£‰º†Ôºå477ËøôÈÅìÈ¢òÁúüÁöÑÂæàÊ£íÔºå‰∏ç‰ºöÂæàÂ§çÊùÇÔºå‰ΩÜÊòØ‰πü‰∏çÊòØ‰∏ÄÂºÄÂßãÂ∞±ËÉΩÊÉ≥Âà∞ÁöÑ„ÄÇ‰ª•‰∏ãÊòØÈ¢òÁõÆÁöÑdescriptionÔºö &amp;rsquo;&amp;rsquo;&amp;rsquo; The Hamming distance between two integers is the number of positions at which the corresponding bits are different.
Now your job is to find the total Hamming distance between all pairs of the given numbers.
Example: Input: 4, 14, 2
Output: 6
Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just showing the four bits relevant in this case).</description>
    </item>
    <item>
      <title>How map reduce work</title>
      <link>https://www.pingrunhuang.github.io/blog/2018-01-09/</link>
      <pubDate>Tue, 09 Jan 2018 11:51:59 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2018-01-09/</guid>
      <description>I actually have been using Map reduce programming paradigm before. Check out my github repo. Since then, I have had a rough concept of how MR works. But since I am so passionate about programming diadigm that I decide to dig into more details of how MR works, what problems it solves and how.
My point of view regarding the workflow of MR how to determine the R patitions location? User define a partitioning function to customize the number of partitions.</description>
    </item>
    <item>
      <title>Merkle tree</title>
      <link>https://www.pingrunhuang.github.io/blog/2017-12-25/</link>
      <pubDate>Mon, 25 Dec 2017 09:26:46 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2017-12-25/</guid>
      <description>‰πãÂâçËÆ≤Ëøá‰∏ÄÁØáÊàëÂØπ‰∫éÂå∫ÂùóÈìæÁöÑÁêÜËß£ÁöÑÊñáÁ´†ÔºåÊñáÁ´†‰∏≠ËÆ≤Ëø∞ÁöÑ‰∏ªË¶ÅÊï∞ÊçÆÁªìÊûÑÊòØÂè´linkedlistÁöÑÊï∞ÊçÆÁªìÊûÑÔºå‰ΩÜÊòØËøô‰πàÂ§ßÂûãÁöÑÁ≥ªÁªüÔºåÊØè‰∏Ä‰∏™blockÈÉΩ‰ΩøÁî®ÈìæË°®Ôºåblock‰∏éblock‰πãÈó¥‰πü‰ΩøÁî®ÈìæË°®ËøõË°åÈìæÊé•ÔºåËøôÊó†ÂºÇ‰∫éÂ∞ÜËµ§Â£Å‰πãÊàò‰∏≠ÊçÜÁªëÊâÄÊúâÊõπÂÜõÁöÑÊàòËàπÂòõÔºåÊòæÁÑ∂ÊòØ‰∏çÁé∞ÂÆûÁöÑ„ÄÇ‰∫éÊòØÊàëÂºÄÂßãÊâæÂØªÁ≠îÊ°àÔºåÂèëÁé∞ÂéüÊù•Â∫ïÂ±ÇÊòØ‰ΩøÁî®‰∫Ü‰∏Ä‰∏™Âè´merkle treeÁöÑÊï∞ÊçÆÁªìÊûÑÔºåËøôÁé©ÊÑèÂú®ÂΩìÊó∂ËØª‰π¶Êó∂ÂÄôÊòØ‰∏çÊõæÊé•Ëß¶ËøáÁöÑÔºåÂàöÂ•ΩÂèØ‰ª•Â≠¶‰π†‰∏Ä‰∏ãÔºåÈ°∫‰æø‰πüËÆ∞ÂΩï‰∏Ä‰∏ã„ÄÇ
‰ªéwikipediaÁöÑËß£ÈáäÔºåmerkle treeÂÆûÈôÖ‰∏äÊòØ‰∏Ä‰∏™hash treeÔºàÂèØ‰ª•ÁúãÂá∫Âå∫ÂùóÈìæ‰πüÂÆûÈôÖ‰∏ä‰πüÂè™ÊòØÂú®ÈáçÂ§ç‰ΩøÁî®ÂìàÂ∏åÁöÑÊ¶ÇÂøµËÄåÂ∑≤Ôºâ„ÄÇÂÆÉË¶ÅËß£ÂÜ≥ÁöÑÈóÆÈ¢òÂÆûÈôÖ‰∏äÂè™Êúâ‰∏Ä‰∏™ÔºåÊÄé‰πàÊ†∑‰øùËØÅÂø´ÈÄüÁöÑverifyÊüê‰∏™‰∫§ÊòìÊòØÂê¶Â∑≤ÁªèÂú®Èìæ‰∏ä‰∫ÜÔºåÂ¶ÇÊûúÊòØÁî®ÈìæË°®ÁöÑÊÄùË∑ØÁöÑËØùÔºåÂ∞±Ë¶ÅÈÅçÂéÜÈìæË°®ÁöÑÊØè‰∏Ä‰∏™ËäÇÁÇπÔºåÊåâÁÖßÁé∞Âú®bitcoin‰∏ªÈìæ‰∏äÁöÑblockÊï∞Èáè_514166_‰∏™ÔºåÊØè‰∏™blockÈáåÈù¢Êã•ÊúâÁöÑtransactionÊï∞ÈáèÊòØ‰∏çÂÆöÁöÑÔºå‰πüÂ∞±ÊòØÊØè‰∏ÄÁ¨î‰∫§ÊòìÊúÄÂùèÁöÑÊÉÖÂÜµÈÉΩË¶ÅÈÅçÂéÜ_514166_*_n_Ê¨°ÊâçËÉΩÊâæÂà∞ÁªìÊûúÔºåÈÇ£Ëøô‰∏™ÊïàÁéáÊòØÂ•á‰ΩéÁöÑ„ÄÇ‰∫éÊòØÔºåmd5ËøôÂÆ∂‰ºôÂ∞±ÂèàËøõÊù•Êêû‰∫ãÊÉÖ‰∫Ü„ÄÇ
ÂÄüÁî®vitalikÂ§ßÁ•ûÁöÑ‰∏ÄÂπÖÂõæ
‰ªéÂõæ‰∏≠ÂèØ‰ª•ÁúãÂá∫Ôºåmerkle treeÂÆûÈôÖ‰∏äÂ∞±ÊòØ‰∏Ä‰∏™‰∫åÂèâÊ†ëÔºà‰ª•Â§™ÂùäÊòØÁî®Èùû‰∫åÂèâÊ†ëÁöÑÂΩ¢ÂºèÂÆûÁé∞ÁöÑmerkle treeÔºâÔºåÊØè‰∏Ä‰∏™merkle tree‰ª£Ë°®‰∏Ä‰∏™blockÔºåËøôÊ†∑‰∏Ä‰∏™ËΩªÂûãÁöÑÂÆ¢Êà∑Á´ØÈúÄË¶ÅËÆ∞ÂΩïÁöÑÊï∞ÊçÆÂè™ÊòØ‰∏Ä‰∫õÂØπÂ∫îÁöÑmd5ÂÄºÂ∞±ÂèØ‰ª•ÂÆûÁé∞ÂØπÁªôÂÆötransactionËøõË°åÊ†°È™åÔºå‰ªéËÄåÂà§Êñ≠Ëøô‰∏™‰∫§ÊòìÊòØÂê¶Â∑≤ÁªèÂú®Èìæ‰∏äÔºå‰ªéËÄåÈò≤Ê≠¢‰∫åÊ¨°‰∏äÈìæ„ÄÇ‰∏æ‰∏™Ê†óÂ≠êÔºö
ÁªôÂÆö‰∏Ä‰∏™‰∫§Êòìtx3, ÁªôÂÆöhash2Âíå‰∏Ä‰∏™merkle md5(md5(tx3)+hash2)ÁöÑÂÄºË∑ümerke rootËøõË°åÊØîÂØπÂ∞±ÂèØ‰ª•‰∫ÜÔºåÂ¶ÇÊûúÁõ∏Á≠âËØ¥ÊòétransactionÂú®ËØ•ÈáåÈù¢ÔºåÂê¶Âàô‰∏çÂú®„ÄÇËøô‰∏™ÁÆóÊ≥ïÂÆûÈôÖ‰∏ä‰πüÊòØÂú®Áî®Á©∫Èó¥Êç¢Êó∂Èó¥ÁöÑ„ÄÇ Âú®vitalikÂ§ßÁ•ûÁöÑÂçöÂÆ¢ÈáåÈù¢Ôºå‰ªñËøòËØ¶ÁªÜÈòêËø∞‰∫Übinary merkle treeÁöÑ‰∏çË∂≥‰πãÂ§ÑÔºåÂêåÊó∂‰πü‰ªãÁªç‰∫Ü‰ª•Â§™Âùä‰∏∫‰ªÄ‰πàÈúÄË¶ÅÂè¶Â§ñ‰∏âÁßçÊ†ëÁªìÊûÑÔºåÊÑüÂÖ¥Ë∂£ÁöÑÂêåÂ≠¶ÂèØ‰ª•ÁúãÁúã
Reference https://blog.ethereum.org/2015/11/15/merkling-in-ethereum/ https://en.wikipedia.org/wiki/Merkle_tree https://medium.com/@evankozliner/merkle-tree-introduction-4c44250e2da7 https://medium.com/coinmonks/merkle-trees-the-backbone-of-distributed-software-4fa0805132c6 </description>
    </item>
    <item>
      <title>My understanding on blockchain so far</title>
      <link>https://www.pingrunhuang.github.io/blog/2017-12-23/</link>
      <pubDate>Sat, 23 Dec 2017 11:43:39 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2017-12-23/</guid>
      <description>Block chain has been talked a lot in the field of high tech industry. Being able to understand this decentralized technology is a plus for my career and able to implement it practicely will even better. I will talk about some information I have learnt so far in this post including the implementation of blockchain using javascript.
Áªß‰∏äÊ¨°ÂÜôÁöÑ‰∏ÄÁØáÂçöÊñáWhat is bitcoin mining?‰πãÂêéÔºåËøôÊ¨°ÁªßÁª≠ÂÜô‰∏ãÂÖ≥‰∫ébitcoinÊäÄÊúØÁöÑÁ¨îËÆ∞„ÄÇ
Áõ∏‰ø°ÁúãËøôÁØáÊñáÁ´†ÁöÑËØªËÄÖ‰ª¨Â∫îËØ•ÊàñÂ§öÊàñÂ∞ëÂØπblockchainÂíåbitcoinÊúâÊâÄ‰∫ÜËß£‰∫ÜÔºåÂ¶ÇÊûúËøôÈáåÈù¢Ê∂âÂèäÂà∞ÁöÑ‰∏Ä‰∫õÊúØËØ≠ËßâÂæó‰∏çÁêÜËß£ÔºåÂèØ‰ª•ËØïÂõæ‰ªéreferenceÈÇ£ÈáåÊâæÂà∞Á≠îÊ°àÔºåÂÆûÂú®‰∏çË°åÂèØ‰ª•wiki‰πãÊàñËÄÖÁõ¥Êé•ËØÑËÆ∫ÂëäËØâÊàëÂì¶„ÄÇÈÇ£Êàë‰∏ªË¶ÅÂú®ËøôÈáåÊ¢≥ÁêÜ‰∏Ä‰∏ãblockchainÂà∞Â∫ïËß£ÂÜ≥‰ªÄ‰πàÈóÆÈ¢òÂíåÂÖ∂‰∏≠ÊàëËÆ§‰∏∫ÂæàÊúâË∂£ÁöÑÊäÄÊúØÁªÜËäÇ„ÄÇ
bitcoinË¶ÅËß£ÂÜ≥ÁöÑÈóÆÈ¢òÊòØÂéª‰∫§ÊòìÁöÑ‰∏≠‰ªãÔºåÁ±ª‰ºº‰∫éÈì∂Ë°åÂú®‰º†ÁªüÁöÑ‰∫§ÊòìÊ®°Âûã‰∏≠ÁöÑÂú∞‰ΩçÔºåËøôÊòØ‰∏Ä‰∏™ÂæàÁõ¥ËßÇËÄå‰∏î‰∫üÂæÖËß£ÂÜ≥ÁöÑÈóÆÈ¢ò„ÄÇËøôÊ†∑ÂÅö‰ºº‰πéÂæàÁêÜÊÉ≥Ôºå‰ΩÜÊòØÊúâ‰∏§‰∏™ÂæàÊòéÊòæÁöÑÈóÆÈ¢òÈúÄË¶ÅËß£ÂÜ≥Ôºö
ÊÄé‰πàÁ°Æ‰øùÊØè‰∏ÄÁ¨îÂÖàÂêéÂèëÁîüÁöÑ‰∫§ÊòìÁöÑÂÖàÂêéÈ°∫Â∫èÔºü ÊÄé‰πàÁ°Æ‰øùÂú®AÂà∞BÁöÑ‰∫§Êòì‰∏≠ÔºåAÊúâË∂≥Â§üÁöÑÈáëÈ¢ùÂèëÁªôBÂë¢Ôºü ‰∏∫‰∫ÜËß£ÂÜ≥Á¨¨‰∏Ä‰∏™ÈóÆÈ¢òÔºåblockchainË¢´ÊèêÂá∫Êù•‰∫Ü„ÄÇËØ¥ÁôΩ‰∫ÜÂ∞±ÊòØ‰∏Ä‰∏™double linked listÔºåÊØè‰∏™Êñ∞Âä†ÂÖ•ÁöÑblockË¢´‰Ωú‰∏∫‰∏Ä‰∏™Êñ∞ÁöÑËäÇÁÇπË¢´Âä†ÂÖ•Áé∞Â≠òÂú®ÁöÑblockchainÈáåÈù¢„ÄÇÊ†πÊçÆsatoshi nakamotoÊèêÂá∫ÁöÑËÆ∫ÊñáÔºåÊØè‰∏ÄÁ¨î‰∫§ÊòìÂú®Âä†ÂÖ•Êï¥‰∏™chainÁöÑÊó∂ÂÄôÈúÄË¶ÅÁªèÂéÜ6‰∏™Ê≠•È™§Ôºö</description>
    </item>
    <item>
      <title>Golang learning 2 -- collection</title>
      <link>https://www.pingrunhuang.github.io/blog/2017-11-15/</link>
      <pubDate>Mon, 13 Nov 2017 11:16:44 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2017-11-15/</guid>
      <description>Slice ‰∏Ä‰∏™slice‰ºöÂåÖÂê´‰∏â‰∏™‰ø°ÊÅØÔºöcapacityÔºå lengthËøòÊúâ‰∏Ä‰∏™ÊåáÂêëÊï∞ÁªÑÂ§¥ÈÉ®ÁöÑpointer„ÄÇ length must be less then capacity.
len() to check the length, cap() to check the capacity of a slice. Let us see an example first to have some intuition:
x := make([]int, 5, 10) // [0 0 0 0 0] x := x[:10] // [0 0 0 0 0 0 0 0 0 0] x[:12] // panic: runtime error: slice bounds out of range From the code above, we can see that capacity is basically the golang solution for dynamic memory allocation.</description>
    </item>
    <item>
      <title>Êï∞ÊçÆÂä†ÂØÜ</title>
      <link>https://www.pingrunhuang.github.io/blog/2017-11-05/</link>
      <pubDate>Sun, 05 Nov 2017 20:39:51 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2017-11-05/</guid>
      <description>As data grow, data encryption become a hot topic to protect our data from disclose. You don&amp;rsquo;t necessarily need to know how exactly it works, but you have to know what it is at least. That is what I&amp;rsquo;m trying to do in this post.
ËØªÁ°ïÂ£´ÁöÑÊó∂ÂÄô‰πüÊúâËÆ≤ËøáÂä†ÂØÜÁöÑ‰∏úË•øÔºå‰ΩÜÊòØÂΩìÊó∂‰πüÊòØÊ®°Ê£±‰∏§ÂèØÁöÑÁü•ÈÅìÊúâËøô‰πàÂõû‰∫ã„ÄÇÁõ¥Âà∞ÊúÄËøëÂõ†‰∏∫È°πÁõÆÁöÑÈúÄË¶ÅËøòÊúâÁúã‰∫Ü‰∏ÄÈÉ®Âè´ÂÅöcitizen fourÁöÑÁ∫™ÂΩïÁâáÔºàËÆ≤Ëø∞Áî∑Á•ûedward snowdenÊè≠Èú≤ÁæéÂõΩÈÄöËøá‚ÄúÊ£±ÈïúËÆ°Âàí‚ÄùÂØπ‰∫∫Ê∞ëËøõË°åÁõëËßÜÁöÑË°å‰∏∫ÔºâÊúâÊÑüËÄåÂèëÔºåÊï∞ÊçÆÁöÑ‰øùÂØÜÊó†ÁñëÂØπ‰∫é‰∏™‰∫∫ÈöêÁßÅÊù•ËØ¥ÊòØÂæàÈáçË¶ÅÁöÑÔºå‰ΩÜÊòØÈöèÁùÄÂ≠¶‰π†ÁöÑÊ∑±ÂÖ•‰Ω†‰ºöÂèëÁé∞ÔºåÂä†ÂØÜÁÆóÊ≥ïÁßçÁ±ªÁúüÁöÑÂæàÂ§öÁîöËá≥ÊâÄÊúâÁöÑÂêçÊ¨°Âä†Âú®‰∏ÄÊ¨°ÁîöËá≥‰ºöÂæà‰π±Ôºå‰∫éÊòØÊàëÊÉ≥ÂÜô‰∏ÄÁØáÂçöÂÆ¢ÊÄªÁªì‰∏Ä‰∏ãËøôÊÆµÊó∂Èó¥ÁöÑÂ≠¶‰π†Ôºå‰πüÂÄüÊ≠§Êú∫‰ºöÊôÆÂèä‰∏Ä‰∏ãÂä†ÂØÜÁöÑÁü•ËØÜÂíåÂ∫îÁî®ÔºåÂ¶ÇÊúâ‰∏çÂ¶•ÔºåÂøòÊåáÊ≠£„ÄÇ
Âä†ÂØÜÁÆóÊ≥ï(Encryption) È¶ñÂÖàÂä†ÂØÜÁÆóÊ≥ïÂàÜÊàêÂØπÁß∞ÔºàsyncÔºâÁöÑÂíåÈùûÂØπÁß∞ÔºàasyncÔºâ‰∏§ÁßçÁöÑ„ÄÇ‰ªñ‰ª¨ÁöÑÂå∫Âà´Â∞±Âú®‰∫éÂÖ¨Èí•ÂíåÁßÅÈí•ÊòØÂê¶Áõ∏ÂêåÔºåÂÖ¨ÁßÅÈí•Áõ∏ÂêåÁöÑÁß∞‰∏∫ÂØπÁß∞Âä†ÂØÜÔºåÂÖ¨ÁßÅÈí•‰∏çÂêåÁöÑÁß∞‰∏∫ÈùûÂØπÁß∞Âä†ÂØÜ„ÄÇÈÇ£‰ªÄ‰πàÊòØÂÖ¨Èí•‰ªÄ‰πàÊòØÁßÅÈí•Âë¢ÔºüÂú®ÂØÜÁ†ÅÂ≠¶‰∏≠ÔºåÊúâ‰∏™ËßÑÂÆöÊòØÁÆóÊ≥ïÂ∫îËØ•ÊòØË¢´ÂÖÅËÆ∏ÂÖ¨ÂºÄÁöÑÔºåÈÇ£Ë¶ÅÊÄé‰πà‰øùËØÅÂú®Âà´‰∫∫ÂæóÁü•Âä†ÂØÜÁÆóÊ≥ïÂêé‰ªçÁÑ∂ËÉΩÂ§üÂèñÂæó‰øùÂØÜÊïàÊûúÂë¢Ôºü‰∫éÊòØÂéÜÂè≤‰∏äÁöÑÂ§ßÁ•û‰ª¨Â∞±ÊèêÂá∫ÂÖàÁî±ÂèëÈÄÅËÄÖÁîüÊàê‰∏ÄÂØπÂÖ¨ÁßÅÈí•ÔºåËøôÂØπÂÖ¨ÁßÅÈí•ÂèØ‰ª•‰∫íÁõ∏Ëß£ÂºÄÁªèËøáÂØπÊñπÂä†ÂØÜÁöÑÂÜÖÂÆπÔºàËøôÈáåÂèØËÉΩ‰∏çÂ§™Â¶•ÔºåÂ∏åÊúõÂæóÂà∞ÊåáÊ≠£Ôºâ„ÄÇÂÖ¨Èí•È°æÂêçÊÄù‰πâÊòØÂÖ¨ÂºÄÁªôpublicÁöÑÔºåÁßÅÈí•ÂàôÊòØÁî±Ê∂àÊÅØÂèëÈÄÅÊñπÁîüÊàêÁöÑ„ÄÇÂú®Â∏åÊúõÂª∫Á´ãsshËøûÊé•ÁöÑ‰∏§Âè∞Êú∫Âô®‰πãÈó¥ÂèØ‰ª•Áî®ssh-genkeyËøõË°åÂØÜÁ†ÅÂØπÁöÑÁîüÊàêÔºå‰Ω†ÂèØ‰ª•ÊâìÂºÄ~/.ssh/id_rsaÊñá‰ª∂Êü•ÁúãÁîüÊàêÁöÑÂÖ¨Âè∏Èí•‰ø°ÊÅØÔºåËøô‰∏™‰πüÊòØÊê≠Âª∫hadoopÈõÜÁæ§ÂøÖÈ°ªÊâßË°åÁöÑÊ≠•È™§Êù•Á°Æ‰øùÈõÜÁæ§‰πãÈó¥ÁöÑÈÄö‰ø°„ÄÇËøôÈáåÂÖà‰∏çÂÅöÂÖ∑‰ΩìÂÆûÁé∞ÁöÑÈÉ®ÂàÜÔºåÁ≠â‰ª•ÂêéÊúâÊó∂Èó¥ÂÜçÊääÂä†ÂØÜÁöÑÁÆóÊ≥ïÂÆûÁé∞ÂÜôÂú®ÊàëÁöÑgistÈáåÈù¢„ÄÇ Âì™‰∫õÂØπÁß∞Âä†ÂØÜÁÆóÊ≥ïÔºöDES, 3DES, blowfish Âì™‰∫õÈùûÂØπÁß∞Âä†ÂØÜÁÆóÊ≥ïÔºö RSAÔºå SM2Ôºà‰∏≠ÂõΩÂõΩÂÆ∂ÂØÜÁ†ÅÂ±Ä‰∏ìÂà©ÔºåÂú®ÂïÜÁî®ÂØÜÁ†ÅÊú∫‰∏≠ÊØîËæÉÂ∏∏Áî®ÔºåË≤å‰ººÈì∂Ë°å‰πüÊòØÂ§ßÂ§öÁî®Ëøô‰∏™Ôºâ
ÂìàÂ∏åÁÆóÊ≥ï(Hash) ÂìàÂ∏åÁÆóÊ≥ïÁöÑÁõÆÊ†áÊòØ‰∏∫‰∫ÜÂ∞Ü‰ªªÊÑèÈïøÂ∫¶ÁöÑÊñáÊú¨ÂÜÖÂÆπÁîüÊàêÂõ∫ÂÆöÈïøÂ∫¶ÔºàÂÖ∑‰ΩìÈïøÂ∫¶Âõ†Â∫îËØ•ÊòØÂõ†ÁÆóÊ≥ïËÄåÂºÇÁöÑÔºâÁöÑ‰∏çÂèØÈÄÜÁöÑÂÄº„ÄÇÁßçÁ±ªÂåÖÂê´ÔºöMD4, MD5ÂíåSHA* Á≠â„ÄÇËøôÈáåÊÉ≥ËÆ≤‰∏Ä‰∏ãÂÖ≥‰∫éSHA256ÁöÑÂÜÖÂÆπÔºå‰∏ªË¶ÅÊòØÂõ†‰∏∫Âú®bitcoinÈáåÈù¢‰∏ªË¶ÅÁî®Âà∞ÁöÑhashÁÆóÊ≥ïÂ∞±ÊòØSHA256ÊàñËÄÖ512„ÄÇ‰∏çÂêåÁöÑsha2ÁÆóÊ≥ïÂØπÂ∫îÁöÑÊòØÊúÄÂêéÁöÑhashÂÄº‰πüÂ∞±ÊòØdigestÁöÑbitÈïøÂ∫¶„ÄÇ
digest:ÁªìÊûúÁöÑhash value cipher:fdsa
Â∫îÁî® Êñá‰ª∂Ê†°È™å(checksum)ÔºöÁî±‰∫éÂìàÂ∏åÁÆóÊ≥ïÁîüÊàêÁöÑÂ≠óÁ¨¶‰∏≤ÂÖ∑ÊúâÁ®çÂæÆ‰øÆÊîπÂì™ÊÄï‰∏Ä‰ΩçÊï∞Â≠óÈÉΩ‰ºöÈÄ†ÊàêÂìàÂ∏åÁªìÊûúÁöÑÊòéÊòæÂ∑ÆÂºÇÔºåÂõ†Ê≠§Âú®Êñá‰ª∂‰º†ËæìËøáÁ®ã‰∏≠ÔºåÂà©Áî®Êñá‰ª∂‰∏≠Ëá™Â∏¶ÁöÑÂìàÂ∏åÂÄºÔºåÂíåÁî®ÂéüÊñáËøõË°åÂìàÂ∏åÁîüÊàêÁöÑÊñ∞ÁöÑÂìàÂ∏åÂÄºËøõË°åÊØîÂØπÔºåÂ¶ÇÊûú‰∏§ËÄÖÁõ∏ÂêåÔºåÂàô‰º†ËæìÁöÑÁªìÊûúÊñá‰ª∂Ë¢´ËÆ§‰∏∫Êú™Ë¢´ÊîπÂä®Ôºå‰ªéËÄå‰øùËØÅÂÆåÊï¥ÊÄß(integrity)„ÄÇ Êï∞Â≠óÁ≠æÂêç(digital signature)ÔºöÂØπ‰∏é‰∏Ä‰∫õÂ§ßcontentÁöÑ‰∏úË•øÊàñËÄÖ‰∏Ä‰∫õÁâπÊÆä‰ø°ÊÅØËøõË°å‰º†ËæìÁöÑËøáÁ®ã‰∏≠ÔºåÂ¶Ç‰Ωï‰øùËØÅÂèëÈÄÅËøáÊù•ÁöÑÊï∞ÊçÆÁúüÁöÑÊòØ‰Ω†ÊâÄËÆ§‰∏∫ÁöÑÂèëÈÄÅËÄÖÂèëÈÄÅÁöÑÂë¢ÔºüËøô‰∏™Êó∂ÂÄôÂèØ‰ª•ËÆ©ÂèëÈÄÅËÄÖÂÖàÁî®ÁßÅÈí•Èí•ÂØπÂéüÊñáÊú¨ÂìàÂ∏åËøáÁöÑÂÄºËøõË°åÂä†ÂØÜÔºåÂä†ÂØÜÁöÑÂÄºappendÂà∞ÂÜÖÂÆπÊú´Â∞æ‰Ωú‰∏∫Á≠æÂêç„ÄÇÂÆ¢Êà∑Á´ØÂÜçÁî®ÂÖ¨Èí•Ëß£ÂØÜÊï∞Â≠óÁ≠æÂêçÔºåÂπ∂‰∏îÂØπcontentÁöÑ‰∏úË•øËøõË°åÂìàÂ∏åÔºå‰∫åËÄÖËøõË°åÊØîÂØπÔºåÂ¶ÇÊûú‰∏ÄËá¥ÂàôÂèØÁ°ÆËÆ§ÂèëÈÄÅËÄÖÁöÑË∫´‰ªΩ„ÄÇËøôÂÖ∂‰∏≠ÂèØËÉΩ‰ºöÊúâÂÖ¨Èí•Ë¢´Êç¢ÁöÑÊÉÖÂÜµÔºåËøôÊó∂ÂÄôÂ∞±ÈúÄË¶Åcertificate authenticatorÔºàcaÔºâÁîüÊàêdigital certificate Êù•ÂÅöËÆ§ËØÅ„ÄÇËøôÈáåÊàëÂè™ÊòØÁÆÄË¶ÅÁöÑËØ¥‰∏Ä‰∏ãÊàëÁöÑÁêÜËß£ÔºåÂÖ∑‰ΩìËøòË¶ÅÁúãÈòÆÂ§ßÁ•ûÁöÑÁîüÂä®ËÆ≤Ëß£„ÄÇhttps‰πüÁî®Âà∞‰∫ÜËøôÈáåÁöÑÁü•ËØÜ„ÄÇ bit coin ‰πüÁî®Âà∞‰∫ÜÂìàÂ∏åÁöÑÂäûÊ≥ïÔºåÊåñÁüøÁöÑÂÆûË¥®Â∞±ÊòØÂØπÂìàÂ∏åÂÄºËøõË°åÊö¥ÂäõÂèçËß£ÔºåËøôÈáåÂèØ‰ª•ÁúãÊàëÁöÑÂè¶Â§ñ‰∏ÄÁØáÂçöÂÆ¢What is bitcoin mining &amp;hellip;&amp;hellip; Summary ÂØÜÁ†ÅÂ≠¶ÊòØ‰∏Ä‰∏™ÂçöÂ§ßÁ≤æÊ∑±ÁöÑÊï∞Â≠¶ÂàÜÊîØÔºåÂÖ∂‰∏≠Ê∂âÂèäÂà∞ÂæàÂ§öÁöÑËØÅÊòéÔºåÊàë‰ª¨ËøôÈáåÁü•ËØÜÁÆÄÂçï‰ªãÁªçÂπ∂‰∏îÁõ¥Êé•ÊãøÁªìËÆ∫ËøáÊù•Áî®ÔºåÂ¶ÇÊûúÊÉ≥Áü•ÈÅìÂÖ∑‰ΩìÊÄé‰πàÊìç‰ΩúÔºåÂèØ‰ª•ÊâæÁõ∏ÂÖ≥ÁöÑËÆ∫ÊñáËøõË°åÊü•ËØ¢„ÄÇÂú®ÂïÜÁî®È¢ÜÂüü‰∏ÄËà¨‰ºöÈááË¥≠Âä†ÂØÜÊú∫ËøõË°åÂä†ÂØÜÁöÑÊìç‰ΩúÔºåÂÖ≥‰∫éÂä†ÂØÜÊú∫ÁöÑ‰∏úË•øÊàëÊúÄËøë‰πüËøòÂú®ÊµãËØïÔºå‰∏ªË¶Å‰πüÊòØÂèëÈÄÅÊåá‰ª§ÔºåËøîÂõûÂä†ÂØÜÁªìÊûúÔºå‰∏çÂêåÂú®‰∫éÂä†ÂØÜÊú∫Áõ∏ÂΩì‰∫é‰∏Ä‰∏™ÂÖ®ËÅåÁöÑÁî®‰∫éÂä†ÂØÜÁöÑÊúçÂä°Âô®(dedicated to encryption ÂæàÊòØÊï¨‰∏ö)„ÄÇ‰∏çÂêåÂä†ÂØÜÊú∫Â∑•‰ΩúÂéüÁêÜÊàñËÄÖapiÂèØËÉΩ‰∏ç‰∏ÄÊ†∑Ôºå‰ΩÜÊòØÂü∫Êú¨ÊñπÂºè‰πüÊòØËæìÂÖ•ipÂíåÊåá‰ª§ÔºåÂæóÂà∞ÁªìÊûúÁöÑËøáÁ®ã„ÄÇ</description>
    </item>
    <item>
      <title>Assemble a data analysis platform -- Bazooka</title>
      <link>https://www.pingrunhuang.github.io/blog/2017-10-29/</link>
      <pubDate>Sun, 29 Oct 2017 17:05:56 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2017-10-29/</guid>
      <description>Never settle &amp;mdash;- One plus
I&amp;rsquo;ve always wanted to have a super monster platform rather then 4 core, integrated graphics card, windows os etc. But due to the high budget, I chose to just stick with my little mac air which is obvious not an option for building big application. Finally, after my first project of re-decorating my apartment, I launch my second project called Bazooka which is the mother board of my so called monster desktop(In my opinion).</description>
    </item>
    <item>
      <title>Dynamic proxy in Java</title>
      <link>https://www.pingrunhuang.github.io/blog/2017-10-26/</link>
      <pubDate>Thu, 26 Oct 2017 17:52:13 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2017-10-26/</guid>
      <description>Proxy your call to the professional, save you some more time
I recently read a great slides talking about Proxy pattern in Java which has confused me for a long time. I&amp;rsquo;ve always consider it as something like the delegator pattern which is like adding a new layer for a specified class so that clients can do more other things when calling it.
It turns out that there could be more to do with java dynamic proxy.</description>
    </item>
    <item>
      <title>What is bitcoin mining?</title>
      <link>https://www.pingrunhuang.github.io/blog/2017-10-11/</link>
      <pubDate>Wed, 11 Oct 2017 10:15:03 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2017-10-11/</guid>
      <description>Bitcoin has been in the field for a while and friends of mine have been talking about bitcoin for a while. I have also read some of the articles talking about bitcoin, the hashing and the trustful features. But to be honest, these concepts still remain a mist for me. I decided to really figure out them in the way that I think and try to explain it as clear as possible.</description>
    </item>
    <item>
      <title>Encrypting sensitive information</title>
      <link>https://www.pingrunhuang.github.io/blog/2017-09-21/</link>
      <pubDate>Thu, 21 Sep 2017 14:06:05 +0800</pubDate>
      <guid>https://www.pingrunhuang.github.io/blog/2017-09-21/</guid>
      <description>I recently have to deal with encrypting some sensitive information which lead me to get to know the encryption algorithms. However, the goal is to encrypt only part of the information in a manner of no decryption.
At the mean time, I remember when I was having internet security class back at ESIGELEC during my master degree, my tutor told us that the general way for encryption is using public key and private key which leads to two-way function(decryptable).</description>
    </item>
  </channel>
</rss>
